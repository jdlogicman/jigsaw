#!/bin/bash
DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )
. $DIR/scripts/parse_args.sh

if ! [ -d "$OUT_DIR" ] && ! mkdir -p "$OUT_DIR"
then
	echo "Unable to make output directory"
	usage
fi

if ! [ -d "$OUT_DIR/Alignment" ]
then
	echo "Missing Alignment directory"
	exit 1
fi

SAMPLES=$(cd $OUT_DIR/Alignment/Fastq && ls *.fastq.gz | cut -f1 -d_ | sort -u | grep -v Undetermined)

cat << __EOF_HEADER__
<!DOCTYPE html><html><head><title>Jigsaw Assembly Report</title>
<head>
<style>
	body {
		color: #333333;
		font-family: 'Helvetica Neue',Helvetica,Arial,sans-serif;
		font-size: 14px;
		line-height: 20px;
	}
	table {
		border-collapse: separate;
		border-color: #DDDDDD;
		border-image: none;
		border-radius: 4px 4px 4px 4px;
		border-style: solid solid solid solid;
		border-width: 1px 1px 1px 1px;
		border-spacing: 0;
	}
	th {
		background-color: #EEEEEE;
	}
	th, td {
		border: 1px solid #DDDDDD;
		line-height: 20px;
		padding: 4px 5px;
		text-align: left;
		vertical-align: top;
	}
	h1 {
		color: rgb(255,180,65);
	}
	.bs-section-heading {
		padding-top: 30px;
	}
	.bs-subsection-heading {
		
	}                                
	hr {
		border: 0;
		height: 1px;
		background-image: -webkit-linear-gradient(left, rgba(0,0,0,0), rgba(0,0,0,0.75), rgba(0,0,0,0)); 
		background-image:    -moz-linear-gradient(left, rgba(0,0,0,0), rgba(0,0,0,0.75), rgba(0,0,0,0)); 
		background-image:     -ms-linear-gradient(left, rgba(0,0,0,0), rgba(0,0,0,0.75), rgba(0,0,0,0)); 
		background-image:      -o-linear-gradient(left, rgba(0,0,0,0), rgba(0,0,0,0.75), rgba(0,0,0,0)); 
	}
	</style>
</head>
<body>
<table class="table bs-table">
<tbody>
	<tr>
		<th>Sample</th><th>Coverage</th><th># Contigs</th><th>Largest Contig</th><th>NA50</th><th>Reports</th><th>Plot</th>
	</tr>
__EOF_HEADER__

# now loop through the reports
for sample in $SAMPLES
do
(
	# load all the rows from the summary csv into variables
	summary=$OUT_DIR/Alignment/$sample*summary.csv
	quast=$OUT_DIR/quast/$sample/report.tsv
	align_report=$(cd $OUT_DIR && find Alignment -name "$sample*report.html")
	quast_report=$(cd $OUT_DIR && find quast/$sample -name "report.html")
	dot_plot=$(cd $OUT_DIR && find visualization/$sample -name "dotplot.png")
	if [ -f $summary ]
	then
		eval $(tail -n+4 $summary | awk  'BEGIN { FS="," } {gsub(/[[:space:]]/,"", $1); printf "SUMMARY%s=\"%s\"\n",$1,$2 }')
	fi
	if [ -f "$quast" ]
	then
		eval $(tail -n+1 $quast | awk  'BEGIN { FS="\t" } {gsub(/[ #()>=%\047]/,"", $1); printf "QUAST%s=\"%s\"\n",$1,$3 }')
	fi
	
cat << __EOF_TABLE__
	<tr>
		<td>$SUMMARYSampleID</td><td>$SUMMARYMeancoverage</td><td>$QUASTcontigs1000bp ($QUASTcontigs0bp)</td><td>$QUASTLargestcontig</td><td>$QUASTNA50</td><td><ul><li><a href="$align_report">Alignment</a></li><li><a href="$quast_report">Quast</a></li></ul></td><td><a href="$dot_plot"><img src="$dot_plot" width="150px" height="150px"/></a></td>
	</tr>
__EOF_TABLE__
)
done
cat << __EOF__
</tbody>
</table>
</body>
__EOF__