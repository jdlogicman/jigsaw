#!/bin/bash
DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )

# arguments:
# Genome path (e.g. /illumina/scratch/Jigsaw/genomes/blahblah/NCBI/11-22-1234/Sequence/WholeGenomeFasta)
# sample regex (e.g. SAMPLE_ID=EC )
# Base output directory
# the format of the stats_file is specified in regenerate_all_stats
GENOME=$1
SAMPLE_LINE_REGEX=$2
BASE_OUT_DIR=$3

if [ -z "$BASE_OUT_DIR" ]
then
	BASE_OUT_DIR=/illumina/scratch/Jigsaw/NMP/Assemblies
fi
STATS_FILE=$BASE_OUT_DIR/summary_stats.csv

# kind of a hack to get the genome GC
ReferenceGC=$(grep -iE $SAMPLE_LINE_REGEX $STATS_FILE | grep QUASTscaffoldReferenceGC | head -1 | tr ',' '\n' | grep QUASTscaffoldReferenceGC | cut -f2 -d=)



if ! [ -f $GENOME/GenomeSize.xml ]
then
	echo "Missing GenomeSize.XML file!"
	exit 1
fi

genomeAttribute()
{
	echo cat $1 | xmllint -shell $GENOME/GenomeSize.xml | grep "=" | cut -f2 -d\"
}


cat << __EOF_HEADER__
<!DOCTYPE html><html><head><title>Jigsaw Assembly Report</title>
<head>
<script type="text/javascript" src="jquery-latest.js"></script> 
<script type="text/javascript" src="jquery.tablesorter.min.js"></script> 
<script>
\$(document).ready(function() 
    { 
        \$(".sortable").tablesorter({sortList: [[0,1]]} ); 
    } 
);
</script>
<style>
	body {
		color: #333333;
		font-family: 'Helvetica Neue',Helvetica,Arial,sans-serif;
		font-size: 12px;
		line-height: 14px;
	}
	table {
		border-collapse: separate;
		border-color: #DDDDDD;
		border-image: none;
		border-radius: 4px 4px 4px 4px;
		border-style: solid solid solid solid;
		border-width: 1px 1px 1px 1px;
		border-spacing: 0;
	}
	th {
		background-color: #EEEEEE;
	}
	th, td {
		border: 1px solid #DDDDDD;
		line-height: 14px;
		padding: 4px 5px;
		text-align: left;
		vertical-align: top;
	}
	h1 {
		color: rgb(255,180,65);
	}
	.bs-section-heading {
		padding-top: 30px;
	}
	.bs-subsection-heading {
		
	}                                
	hr {
		border: 0;
		height: 1px;
		background-image: -webkit-linear-gradient(left, rgba(0,0,0,0), rgba(0,0,0,0.75), rgba(0,0,0,0)); 
		background-image:    -moz-linear-gradient(left, rgba(0,0,0,0), rgba(0,0,0,0.75), rgba(0,0,0,0)); 
		background-image:     -ms-linear-gradient(left, rgba(0,0,0,0), rgba(0,0,0,0.75), rgba(0,0,0,0)); 
		background-image:      -o-linear-gradient(left, rgba(0,0,0,0), rgba(0,0,0,0.75), rgba(0,0,0,0)); 
	}
	</style>
</head>
<body>
<h1>$(genomeAttribute "/sequenceSizes/@genomeName")</h1>
<ul>
	<li>Length: $(genomeAttribute "/sequenceSizes/chromosome/@totalBases" | paste -sd+ | bc)</li>
	<li>GC Content: $ReferenceGC</li>
</ul>
<table class="table bs-table sortable">
__EOF_HEADER__
declare -A columnMap
columnMap["ANALYSIS_ID"]="Analysis ID"
columnMap["SAMPLE_ID"]="Sample ID"
columnMap["PARAMS"]="Conditions"
columnMap["QUASTbrokenGenomefraction"]="genome %"
columnMap["QUASTbrokencontigs"]="#contigs"
columnMap["QUASTbrokenmisassemblies"]="#misassemblies"
columnMap["QUASTbrokenLargestalignment"]="Largest Alignment"
columnMap["PICARDMEAN_INSERT_SIZE"]="Mean Insert Size"
columnMap["PICARDSTANDARD_DEVIATION"]="Insert StdDev"
columnMap["PICARD_ALIGNMENTMEAN_READ_LENGTH"]="Mean Read Len"
columnMap["QUASTbrokenNGA50"]="NGA50"

orderedHeaders=("ANALYSIS_ID"
"SAMPLE_ID"
"PARAMS"
"QUASTbrokenGenomefraction"
"QUASTbrokencontigs"
"QUASTbrokenmisassemblies"
"QUASTbrokenLargestalignment"
"QUASTbrokenNGA50"
"PICARDMEAN_INSERT_SIZE"
"PICARDSTANDARD_DEVIATION"
"PICARD_ALIGNMENTMEAN_READ_LENGTH")

echo "<thead>"
echo "<tr>"
for K in "${orderedHeaders[@]}" 
do
	echo "<th>${columnMap[$K]}</th>"
done
echo "<th>Reports</th>"
echo "</tr>"
echo "</thead>"
echo "<tbody>"

shopt -s nocasematch;

while read line
do
	if [[ $line =~ $SAMPLE_LINE_REGEX ]]
	then
		echo "<tr>"
		# transform the line into variable values in memory
		eval "$(echo $line | tr "," ";")"
		for K in "${orderedHeaders[@]}" 
		do
			# echo each variable value out. The name of the variable is in $K 
			echo "<td>${!K}</td>"
		done
		align_report=$(cd $BASE_OUT_DIR && find $ANALYSIS_ID/Alignment -name "$SAMPLE_ID*report.html")
		quast_report=$(cd $BASE_OUT_DIR && find $ANALYSIS_ID/quast/$SAMPLE_ID -name "report.html")
		dot_plot=$(cd $BASE_OUT_DIR && find $ANALYSIS_ID/visualization/$SAMPLE_ID -name "dotplot.png")
		picard=$ANALYSIS_ID/picard/$SAMPLE_ID
cat << __EOF_REPORTS__
		<td>
		<ul>
			<li><a href="$align_report">Alignment</a></li>
			<li><a href="$quast_report">Quast</a></li>
			<li><a href="$picard">Picard</a></li>
			<li><a href="$dotplot">Dot plot</a></li>
		</ul>
		</td>
__EOF_REPORTS__
		echo "</tr>"
	fi
done < $STATS_FILE
cat << __EOF_FOOTER__
</tbody>
</table>
</body>
__EOF_FOOTER__
