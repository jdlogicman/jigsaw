#!/bin/bash
DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )
. $DIR/scripts/parse_args.sh

# after the standard arguments:
# sample ID
# 
# Produces a JSON-syntax object to stdout
# analysis ID,sample ID,Conditions,<all quast metrics>,<all alignment metrics>,

if ! [ -d "$OUT_DIR/Alignment" ]
then
	echo "Missing Alignment directory"
	exit 1
fi
ANALYSIS_ID=$(basename $OUT_DIR)
SAMPLE_ID=$1

if [ -f "$OUT_DIR/pipeline_params.txt" ]
then
	PARAMS=$(cat "$OUT_DIR/pipeline_params.txt" | tr "\n" ";" | tr "," " " | tr '"' "'" | sed 's/;$//g')
fi

# load all the rows from the summary csv into variables
summary=$(ls $OUT_DIR/Alignment/$SAMPLE_ID*summary.csv)
quast=$OUT_DIR/quast/$SAMPLE_ID/report.tsv
picard=$OUT_DIR/picard/$SAMPLE_ID/metrics.insert_size_metrics
picard_alignment=$OUT_DIR/picard/$SAMPLE_ID/metrics.alignment_summary_metrics
echo -n "{ANALYSIS_ID:\"$ANALYSIS_ID\",SAMPLE_ID:\"$SAMPLE_ID\",PARAMS:\"$PARAMS\","
if [ -f "$summary" ]
then
	tail -n+4 $summary | awk  'BEGIN { FS="," } {gsub(/[[:space:]]/,"", $1); printf "SUMMARY%s:\"%s\",",$1,$2 }'
fi
if [ -f "$quast" ]
then
	tail -n+1 $quast | awk  'BEGIN { FS="\t" } {gsub(/[ #()>=%\047]/,"", $1); printf "QUASTbroken%s:\"%s\"\nQUASTscaffold%s=\"%s\",",$1,$2,$1,$3 }'
fi

roundValue()
{
	if [[ $1 =~ [0-9]*\.[0-9]{3,} ]]
	then
		printf "%.2f" $1
	else
		echo $1
	fi
}

if [ -f "$picard" ]
then
	headers=($(tail -n+7 $picard | head -1 | tr ' ' '_' | tr '\t' ' '))
	values=($(tail -n+8 $picard | head -1 | tr '\t' ' '))
	for i in "${!headers[@]}"
	do 
		echo -n "PICARD${headers[$i]}:\"$(roundValue ${values[$i]} 2)\""
	done
fi
if [ -f "$picard_alignment" ]
then
	headers=($(tail -n+7 $picard_alignment| head -1 | tr ' ' '_' | tr '\t' ' '))
	values=($(grep -E ^PAIR $picard_alignment | tr '\t' ' '))
	for i in "${!headers[@]}"
	do 
		echo -n "PICARD_ALIGNMENT${headers[$i]}:\"$(roundValue ${values[$i]} 2)\""
	done
fi
echo "},"


